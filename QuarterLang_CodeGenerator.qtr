star
module CodeGenerator:
  define generate_nasm(irs as List<IR>) as primative:
    var out as primative = "section .text\n"
    for ir in irs: out = out + ir.to_nasm() + "\n" end for
    return out
  end define
end module
end

star
module CodeGenerator:

  import "Config.qtr", "SymbolTable.qtr", "Optimization.qtr", "IR.qtr"

  define sanitize_label(label as str) as str:
    return label.replace(" ", "_").replace("-", "_").replace(".", "_")
  end define

  define emit_prologue(func_name as str) as str:
    return """
    ; Function: {func_name}
    {func_name}:
        push rbp
        mov rbp, rsp
    """
  end define

  define emit_epilogue() as str:
    return """
        pop rbp
        ret
    """
  end define

  define emit_data_section(data as List<(str, str)>) as str:
    var section as str = "section .data\n"
    for pair in data:
      let label = sanitize_label(pair.0)
      section = section + "{label}: db {pair.1}\n"
    end for
    return section
  end define

  define emit_bss_section(vars as List<(str, int)>) as str:
    var section as str = "section .bss\n"
    for var in vars:
      let name = sanitize_label(var.0)
      let size = var.1
      section = section + "{name}: resb {size}\n"
    end for
    return section
  end define

  define emit_text_section(irs as List<IR>) as str:
    var section as str = "section .text\n    global _start\n\n"
    var current_func as str = ""
    for ir in irs:
      if ir.type == "FunctionStart":
        current_func = sanitize_label(ir.name)
        section = section + emit_prologue(current_func)
      elif ir.type == "FunctionEnd":
        section = section + emit_epilogue()
      else:
        section = section + "    " + ir.to_nasm() + "\n"
      end if
    end for
    return section
  end define

  define generate_nasm(ir_program as List<IR>, data as List<(str, str)>, bss as List<(str, int)>) as str:
    val optimized_ir = Optimization.optimize(ir_program)

    val header = "; Generated by QuarterLang CodeGenerator\n; Target: x86-64 NASM\n\n"
    val data_section = emit_data_section(data)
    val bss_section = emit_bss_section(bss)
    val text_section = emit_text_section(optimized_ir)

    return header + data_section + "\n" + bss_section + "\n" + text_section
  end define

end module
end
